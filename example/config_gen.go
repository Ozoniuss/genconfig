// Code generated by configgen.go; DO NOT EDIT.
package example

import (
    "errors"
    "fmt"
    "os"
    "strconv"
    "time"
)

const (
    MYAPP_HDD_SYNC_PATH_ENV = "MYAPP_HDD_SYNC_PATH"
    MYAPP_DRY_RUN_ENV = "MYAPP_DRY_RUN"
    MYAPP_LOL_ENV = "MYAPP_LOL"
    MYAPP_TIMEOUT_ENV = "MYAPP_TIMEOUT"
    MYAPP_PORT_ENV = "MYAPP_PORT"
    MYAPP_PORT32_ENV = "MYAPP_PORT32"
    MYAPP_PORT16_ENV = "MYAPP_PORT16"
)

var (
    ErrHddSyncPathNotSet = errors.New(MYAPP_HDD_SYNC_PATH_ENV)
    ErrDryRunNotSet = errors.New(MYAPP_DRY_RUN_ENV)
    ErrDryRunFormat = errors.New(MYAPP_DRY_RUN_ENV)
    ErrLolNotSet = errors.New(MYAPP_LOL_ENV)
    ErrLolFormat = errors.New(MYAPP_LOL_ENV)
    ErrTimeoutNotSet = errors.New(MYAPP_TIMEOUT_ENV)
    ErrTimeoutFormat = errors.New(MYAPP_TIMEOUT_ENV)
    ErrPortNotSet = errors.New(MYAPP_PORT_ENV)
    ErrPortFormat = errors.New(MYAPP_PORT_ENV)
    ErrPort32NotSet = errors.New(MYAPP_PORT32_ENV)
    ErrPort32Format = errors.New(MYAPP_PORT32_ENV)
    ErrPort16NotSet = errors.New(MYAPP_PORT16_ENV)
    ErrPort16Format = errors.New(MYAPP_PORT16_ENV)
)

func LoadConfig() (Config, error) {
    var config Config
    var missingErr, formatErr error
    val_HddSyncPath, ok := os.LookupEnv(MYAPP_HDD_SYNC_PATH_ENV)
    if !ok {
        missingErr = errors.Join(missingErr, ErrHddSyncPathNotSet)
    } else {
        config.HddSyncPath = val_HddSyncPath
    }
    val_DryRun, ok := os.LookupEnv(MYAPP_DRY_RUN_ENV)
    if !ok {
        missingErr = errors.Join(missingErr, ErrDryRunNotSet)
    } else {
        parsed, err := strconv.ParseBool(val_DryRun)
        if err != nil {
            formatErr = errors.Join(formatErr, ErrDryRunFormat)
        } else {
            config.DryRun = parsed
        }
    }
    val_Lol, ok := os.LookupEnv(MYAPP_LOL_ENV)
    if !ok {
        missingErr = errors.Join(missingErr, ErrLolNotSet)
    } else {
        parsed, err := strconv.ParseBool(val_Lol)
        if err != nil {
            formatErr = errors.Join(formatErr, ErrLolFormat)
        } else {
            config.Lol = parsed
        }
    }
    val_Timeout, ok := os.LookupEnv(MYAPP_TIMEOUT_ENV)
    if !ok {
        missingErr = errors.Join(missingErr, ErrTimeoutNotSet)
    } else {
        parsed, err := time.ParseDuration(val_Timeout)
        if err != nil {
            formatErr = errors.Join(formatErr, ErrTimeoutFormat)
        } else {
            config.Timeout = parsed
        }
    }
    val_Port, ok := os.LookupEnv(MYAPP_PORT_ENV)
    if !ok {
        missingErr = errors.Join(missingErr, ErrPortNotSet)
    } else {
        parsed, err := strconv.Atoi(val_Port)
        if err != nil {
            formatErr = errors.Join(formatErr, ErrPortFormat)
        } else {
            config.Port = parsed
        }
    }
    val_Port32, ok := os.LookupEnv(MYAPP_PORT32_ENV)
    if !ok {
        missingErr = errors.Join(missingErr, ErrPort32NotSet)
    } else {
        parsed, err := strconv.ParseUint(val_Port32, 10, 32)
        if err != nil {
            formatErr = errors.Join(formatErr, ErrPort32Format)
        } else {
            config.Port32 = uint32(parsed)
        }
    }
    val_Port16, ok := os.LookupEnv(MYAPP_PORT16_ENV)
    if !ok {
        missingErr = errors.Join(missingErr, ErrPort16NotSet)
    } else {
        parsed, err := strconv.ParseInt(val_Port16, 10, 16)
        if err != nil {
            formatErr = errors.Join(formatErr, ErrPort16Format)
        } else {
            config.Port16 = int16(parsed)
        }
    }

    if missingErr != nil || formatErr != nil {
        return Config{}, fmt.Errorf("config errors: %w %w", missingErr, formatErr)
    }

    return config, nil
}

var loadConfig = LoadConfig
