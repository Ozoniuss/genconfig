// Code generated by configgen.go; DO NOT EDIT.

package main

import (
    "fmt"
    "os"
    "strconv"
    "strings"
    "time"
)

const (
    EXAMPLE_HDDSYNCPATH_ENV = "EXAMPLE_HDDSYNCPATH"
    EXAMPLE_DRYRUN_ENV = "EXAMPLE_DRYRUN"
    EXAMPLE_LOL_ENV = "EXAMPLE_LOL"
    EXAMPLE_TIMEOUT_ENV = "EXAMPLE_TIMEOUT"
    EXAMPLE_PORT_ENV = "EXAMPLE_PORT"
    EXAMPLE_PORT32_ENV = "EXAMPLE_PORT32"
    EXAMPLE_PORT16_ENV = "EXAMPLE_PORT16"
    EXAMPLE_NE_NAME_ENV = "EXAMPLE_NE_NAME"
    EXAMPLE_NE_AGE_ENV = "EXAMPLE_NE_AGE"
)

func LoadConfig() (Config, error) {
    var config Config
    var missingVars []string
    var formatVars []string
    val_HddSyncPath, ok := os.LookupEnv(EXAMPLE_HDDSYNCPATH_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_HDDSYNCPATH_ENV)
    } else {
        config.HddSyncPath = val_HddSyncPath
    }
    val_DryRun, ok := os.LookupEnv(EXAMPLE_DRYRUN_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_DRYRUN_ENV)
    } else {
        parsed, err := strconv.ParseBool(val_DryRun)
        if err != nil {
            formatVars = append(formatVars, EXAMPLE_DRYRUN_ENV)
        } else {
            config.DryRun = parsed
        }
    }
    val_Lol, ok := os.LookupEnv(EXAMPLE_LOL_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_LOL_ENV)
    } else {
        parsed, err := strconv.ParseBool(val_Lol)
        if err != nil {
            formatVars = append(formatVars, EXAMPLE_LOL_ENV)
        } else {
            config.Lol = parsed
        }
    }
    val_Timeout, ok := os.LookupEnv(EXAMPLE_TIMEOUT_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_TIMEOUT_ENV)
    } else {
        parsed, err := time.ParseDuration(val_Timeout)
        if err != nil {
            formatVars = append(formatVars, EXAMPLE_TIMEOUT_ENV)
        } else {
            config.Timeout = parsed
        }
    }
    val_Port, ok := os.LookupEnv(EXAMPLE_PORT_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_PORT_ENV)
    } else {
        parsed, err := strconv.Atoi(val_Port)
        if err != nil {
            formatVars = append(formatVars, EXAMPLE_PORT_ENV)
        } else {
            config.Port = parsed
        }
    }
    val_Port32, ok := os.LookupEnv(EXAMPLE_PORT32_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_PORT32_ENV)
    } else {
        parsed, err := strconv.ParseUint(val_Port32, 10, 32)
        if err != nil {
            formatVars = append(formatVars, EXAMPLE_PORT32_ENV)
        } else {
            config.Port32 = uint32(parsed)
        }
    }
    val_Port16, ok := os.LookupEnv(EXAMPLE_PORT16_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_PORT16_ENV)
    } else {
        parsed, err := strconv.ParseInt(val_Port16, 10, 16)
        if err != nil {
            formatVars = append(formatVars, EXAMPLE_PORT16_ENV)
        } else {
            config.Port16 = int16(parsed)
        }
    }
    val_Ne_Name, ok := os.LookupEnv(EXAMPLE_NE_NAME_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_NE_NAME_ENV)
    } else {
        config.Ne.Name = val_Ne_Name
    }
    val_Ne_Age, ok := os.LookupEnv(EXAMPLE_NE_AGE_ENV)
    if !ok {
        missingVars = append(missingVars, EXAMPLE_NE_AGE_ENV)
    } else {
        parsed, err := strconv.Atoi(val_Ne_Age)
        if err != nil {
            formatVars = append(formatVars, EXAMPLE_NE_AGE_ENV)
        } else {
            config.Ne.Age = parsed
        }
    }

    if len(missingVars) > 0 || len(formatVars) > 0 {
        var parts []string
        if len(missingVars) > 0 {
            parts = append(parts, fmt.Sprintf("missing env vars: %s", strings.Join(missingVars, ", ")))
        }
        if len(formatVars) > 0 {
            parts = append(parts, fmt.Sprintf("invalid format in env vars: %s", strings.Join(formatVars, ", ")))
        }
        return Config{}, fmt.Errorf(strings.Join(parts, "; "))
    }

    return config, nil
}
