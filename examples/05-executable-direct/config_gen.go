// Code generated by configgen.go; DO NOT EDIT.

package config

import (
    "errors"
    "os"
    "strconv"
    "strings"
    "time"
)

const (
    MYAPP_HDDSYNCPATH_ENV = "MYAPP_HDDSYNCPATH"
    MYAPP_DRYRUN_ENV = "MYAPP_DRYRUN"
    MYAPP_LOL_ENV = "MYAPP_LOL"
    MYAPP_TIMEOUT_ENV = "MYAPP_TIMEOUT"
    MYAPP_PORT_ENV = "MYAPP_PORT"
    MYAPP_PORT32_ENV = "MYAPP_PORT32"
    MYAPP_PORT16_ENV = "MYAPP_PORT16"
    MYAPP_NE_NAME_ENV = "MYAPP_NE_NAME"
    MYAPP_NE_AGE_ENV = "MYAPP_NE_AGE"
)

var (
    ErrMyappHddsyncpathEnvMissing = errors.New(MYAPP_HDDSYNCPATH_ENV)
    ErrMyappDryrunEnvMissing = errors.New(MYAPP_DRYRUN_ENV)
    ErrMyappDryrunEnvInvalid = errors.New(MYAPP_DRYRUN_ENV)
    ErrMyappLolEnvMissing = errors.New(MYAPP_LOL_ENV)
    ErrMyappLolEnvInvalid = errors.New(MYAPP_LOL_ENV)
    ErrMyappTimeoutEnvMissing = errors.New(MYAPP_TIMEOUT_ENV)
    ErrMyappTimeoutEnvInvalid = errors.New(MYAPP_TIMEOUT_ENV)
    ErrMyappPortEnvMissing = errors.New(MYAPP_PORT_ENV)
    ErrMyappPortEnvInvalid = errors.New(MYAPP_PORT_ENV)
    ErrMyappPort32EnvMissing = errors.New(MYAPP_PORT32_ENV)
    ErrMyappPort32EnvInvalid = errors.New(MYAPP_PORT32_ENV)
    ErrMyappPort16EnvMissing = errors.New(MYAPP_PORT16_ENV)
    ErrMyappPort16EnvInvalid = errors.New(MYAPP_PORT16_ENV)
    ErrMyappNeNameEnvMissing = errors.New(MYAPP_NE_NAME_ENV)
    ErrMyappNeAgeEnvMissing = errors.New(MYAPP_NE_AGE_ENV)
    ErrMyappNeAgeEnvInvalid = errors.New(MYAPP_NE_AGE_ENV)
)

func LoadMyConfig() (MyConfig, error) {
    var config MyConfig
    var missingVars []error
    var formatVars []error
    val_HddSyncPath, ok := os.LookupEnv(MYAPP_HDDSYNCPATH_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappHddsyncpathEnvMissing)
    } else {
        config.HddSyncPath = val_HddSyncPath
    }
    val_DryRun, ok := os.LookupEnv(MYAPP_DRYRUN_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappDryrunEnvMissing)
    } else {
        parsed, err := strconv.ParseBool(val_DryRun)
        if err != nil {
            formatVars = append(formatVars, ErrMyappDryrunEnvInvalid)
        } else {
            config.DryRun = parsed
        }
    }
    val_Lol, ok := os.LookupEnv(MYAPP_LOL_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappLolEnvMissing)
    } else {
        parsed, err := strconv.ParseBool(val_Lol)
        if err != nil {
            formatVars = append(formatVars, ErrMyappLolEnvInvalid)
        } else {
            config.Lol = parsed
        }
    }
    val_Timeout, ok := os.LookupEnv(MYAPP_TIMEOUT_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappTimeoutEnvMissing)
    } else {
        parsed, err := time.ParseDuration(val_Timeout)
        if err != nil {
            formatVars = append(formatVars, ErrMyappTimeoutEnvInvalid)
        } else {
            config.Timeout = parsed
        }
    }
    val_Port, ok := os.LookupEnv(MYAPP_PORT_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappPortEnvMissing)
    } else {
        parsed, err := strconv.Atoi(val_Port)
        if err != nil {
            formatVars = append(formatVars, ErrMyappPortEnvInvalid)
        } else {
            config.Port = parsed
        }
    }
    val_Port32, ok := os.LookupEnv(MYAPP_PORT32_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappPort32EnvMissing)
    } else {
        parsed, err := strconv.ParseUint(val_Port32, 10, 32)
        if err != nil {
            formatVars = append(formatVars, ErrMyappPort32EnvInvalid)
        } else {
            config.Port32 = uint32(parsed)
        }
    }
    val_Port16, ok := os.LookupEnv(MYAPP_PORT16_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappPort16EnvMissing)
    } else {
        parsed, err := strconv.ParseInt(val_Port16, 10, 16)
        if err != nil {
            formatVars = append(formatVars, ErrMyappPort16EnvInvalid)
        } else {
            config.Port16 = int16(parsed)
        }
    }
    val_Ne_Name, ok := os.LookupEnv(MYAPP_NE_NAME_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappNeNameEnvMissing)
    } else {
        config.Ne.Name = val_Ne_Name
    }
    val_Ne_Age, ok := os.LookupEnv(MYAPP_NE_AGE_ENV)
    if !ok {
        missingVars = append(missingVars, ErrMyappNeAgeEnvMissing)
    } else {
        parsed, err := strconv.Atoi(val_Ne_Age)
        if err != nil {
            formatVars = append(formatVars, ErrMyappNeAgeEnvInvalid)
        } else {
            config.Ne.Age = parsed
        }
    }

    if len(missingVars) > 0 || len(formatVars) > 0 {
        var verr error
        if len(missingVars) > 0 {
            verr = errors.Join(verr, MissingEnvVarsError{vars: missingVars})
        }
        if len(formatVars) > 0 {
            verr = errors.Join(verr, InvalidEnvVarsError{vars: missingVars})
        }
        return MyConfig{}, verr
    }

    return config, nil
}

type MissingEnvVarsError struct {
	vars []error
}

func (m MissingEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m MissingEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " are not set"
}

type InvalidEnvVarsError struct {
	vars []error
}

func (m InvalidEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m InvalidEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " have an invalid value"
}
