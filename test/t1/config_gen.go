// Code generated by configgen.go; EDIT AT YOUR OWN RISK.
//go:build testcases
// +build testcases

package t1

import (
    "errors"
    "os"
    "strconv"
    "strings"
    "time"
)

const (
    TESTCONFIG1_APPNAME_ENV = "TESTCONFIG1_APPNAME"
    TESTCONFIG1_DEBUG_ENV = "TESTCONFIG1_DEBUG"
    TESTCONFIG1_TIMEOUT_ENV = "TESTCONFIG1_TIMEOUT"
    TESTCONFIG1_RETRIES_ENV = "TESTCONFIG1_RETRIES"
)

var (
    ErrTestconfig1AppnameEnvMissing = errors.New(TESTCONFIG1_APPNAME_ENV)
    ErrTestconfig1DebugEnvMissing = errors.New(TESTCONFIG1_DEBUG_ENV)
    ErrTestconfig1DebugEnvInvalid = errors.New(TESTCONFIG1_DEBUG_ENV)
    ErrTestconfig1TimeoutEnvMissing = errors.New(TESTCONFIG1_TIMEOUT_ENV)
    ErrTestconfig1TimeoutEnvInvalid = errors.New(TESTCONFIG1_TIMEOUT_ENV)
    ErrTestconfig1RetriesEnvMissing = errors.New(TESTCONFIG1_RETRIES_ENV)
    ErrTestconfig1RetriesEnvInvalid = errors.New(TESTCONFIG1_RETRIES_ENV)
)

func LoadTestConfig1() (TestConfig1, error) {
    var config TestConfig1
    var missingVars []error
    var formatVars []error
    val_AppName, ok := os.LookupEnv(TESTCONFIG1_APPNAME_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfig1AppnameEnvMissing)
    } else {
        config.AppName = val_AppName
    }
    val_Debug, ok := os.LookupEnv(TESTCONFIG1_DEBUG_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfig1DebugEnvMissing)
    } else {
        parsed, err := strconv.ParseBool(val_Debug)
        if err != nil {
            formatVars = append(formatVars, ErrTestconfig1DebugEnvInvalid)
        } else {
            config.Debug = parsed
        }
    }
    val_Timeout, ok := os.LookupEnv(TESTCONFIG1_TIMEOUT_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfig1TimeoutEnvMissing)
    } else {
        parsed, err := time.ParseDuration(val_Timeout)
        if err != nil {
            formatVars = append(formatVars, ErrTestconfig1TimeoutEnvInvalid)
        } else {
            config.Timeout = parsed
        }
    }
    val_Retries, ok := os.LookupEnv(TESTCONFIG1_RETRIES_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfig1RetriesEnvMissing)
    } else {
        parsed, err := strconv.Atoi(val_Retries)
        if err != nil {
            formatVars = append(formatVars, ErrTestconfig1RetriesEnvInvalid)
        } else {
            config.Retries = parsed
        }
    }

    if len(missingVars) > 0 || len(formatVars) > 0 {
        var verr error
        if len(missingVars) > 0 {
            verr = errors.Join(verr, MissingEnvVarsError{vars: missingVars})
        }
        if len(formatVars) > 0 {
            verr = errors.Join(verr, InvalidEnvVarsError{vars: missingVars})
        }
        return TestConfig1{}, verr
    }

    return config, nil
}

type MissingEnvVarsError struct {
	vars []error
}

func (m MissingEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m MissingEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " are not set"
}

type InvalidEnvVarsError struct {
	vars []error
}

func (m InvalidEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m InvalidEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " have an invalid value"
}
