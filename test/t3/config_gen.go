// Code generated by configgen.go; EDIT AT YOUR OWN RISK.
//go:build testcases
// +build testcases

package t3

import (
    "errors"
    "os"
    "strconv"
    "strings"
)

const (
    TESTCONFIGINTS_INT8VAL_ENV = "TESTCONFIGINTS_INT8VAL"
    TESTCONFIGINTS_INT16VAL_ENV = "TESTCONFIGINTS_INT16VAL"
    TESTCONFIGINTS_INT32VAL_ENV = "TESTCONFIGINTS_INT32VAL"
    TESTCONFIGINTS_INT64VAL_ENV = "TESTCONFIGINTS_INT64VAL"
)

var (
    ErrTestconfigintsInt8valEnvMissing = errors.New(TESTCONFIGINTS_INT8VAL_ENV)
    ErrTestconfigintsInt8valEnvInvalid = errors.New(TESTCONFIGINTS_INT8VAL_ENV)
    ErrTestconfigintsInt16valEnvMissing = errors.New(TESTCONFIGINTS_INT16VAL_ENV)
    ErrTestconfigintsInt16valEnvInvalid = errors.New(TESTCONFIGINTS_INT16VAL_ENV)
    ErrTestconfigintsInt32valEnvMissing = errors.New(TESTCONFIGINTS_INT32VAL_ENV)
    ErrTestconfigintsInt32valEnvInvalid = errors.New(TESTCONFIGINTS_INT32VAL_ENV)
    ErrTestconfigintsInt64valEnvMissing = errors.New(TESTCONFIGINTS_INT64VAL_ENV)
    ErrTestconfigintsInt64valEnvInvalid = errors.New(TESTCONFIGINTS_INT64VAL_ENV)
)

func LoadTestConfigInts() (TestConfigInts, error) {
    var config TestConfigInts
    var missingVars []error
    var formatVars []error
    val_Int8Val, ok := os.LookupEnv(TESTCONFIGINTS_INT8VAL_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfigintsInt8valEnvMissing)
    } else {
        parsed, err := strconv.ParseInt(val_Int8Val, 10, 8)
        if err != nil {
            formatVars = append(formatVars, ErrTestconfigintsInt8valEnvInvalid)
        } else {
            config.Int8Val = int8(parsed)
        }
    }
    val_Int16Val, ok := os.LookupEnv(TESTCONFIGINTS_INT16VAL_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfigintsInt16valEnvMissing)
    } else {
        parsed, err := strconv.ParseInt(val_Int16Val, 10, 16)
        if err != nil {
            formatVars = append(formatVars, ErrTestconfigintsInt16valEnvInvalid)
        } else {
            config.Int16Val = int16(parsed)
        }
    }
    val_Int32Val, ok := os.LookupEnv(TESTCONFIGINTS_INT32VAL_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfigintsInt32valEnvMissing)
    } else {
        parsed, err := strconv.ParseInt(val_Int32Val, 10, 32)
        if err != nil {
            formatVars = append(formatVars, ErrTestconfigintsInt32valEnvInvalid)
        } else {
            config.Int32Val = int32(parsed)
        }
    }
    val_Int64Val, ok := os.LookupEnv(TESTCONFIGINTS_INT64VAL_ENV)
    if !ok {
        missingVars = append(missingVars, ErrTestconfigintsInt64valEnvMissing)
    } else {
        parsed, err := strconv.ParseInt(val_Int64Val, 10, 64)
        if err != nil {
            formatVars = append(formatVars, ErrTestconfigintsInt64valEnvInvalid)
        } else {
            config.Int64Val = int64(parsed)
        }
    }

    if len(missingVars) > 0 || len(formatVars) > 0 {
        var verr error
        if len(missingVars) > 0 {
            verr = errors.Join(verr, MissingEnvVarsError{vars: missingVars})
        }
        if len(formatVars) > 0 {
            verr = errors.Join(verr, InvalidEnvVarsError{vars: missingVars})
        }
        return TestConfigInts{}, verr
    }

    return config, nil
}

type MissingEnvVarsError struct {
	vars []error
}

func (m MissingEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m MissingEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " are not set"
}

type InvalidEnvVarsError struct {
	vars []error
}

func (m InvalidEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m InvalidEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " have an invalid value"
}
